[{"content":"\u003ch2 id=\"grey-hat-ctf\"\u003eGrey hat CTF\u003c/h2\u003e\n\u003cp\u003eI participated in the GreyHats CTF 2024 along side a group of my friends. I mange to solve two challenges, All About Timing and Baby web.\u003c/p\u003e\n\u003ch1 id=\"all-about-timing\"\u003eAll About Timing.\u003c/h1\u003e\n\u003cp\u003eThe All About Timing Challenge is a simple CTF challenge that requires us to guess what is the randomly generated number to get the flag.\nOpening the code provided, we can see the code utilise to create this challenge. Analysing the code, we can quickly summarise that the program does the following:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eCreate a seed using the computer time\u003c/li\u003e\n\u003cli\u003eTake in the users input\u003c/li\u003e\n\u003cli\u003eGenerate a number\u003c/li\u003e\n\u003cli\u003ePerform a comparison between the users input and code generated number. If it matches, the flag is printed out, else a error message is printed out.\n\u003cimg src=\"/images/posts/ctfgreyhat2024/pic1.png\" alt=\"Image alt\"\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eOn first glance of the code, it may seems that the number that is generated is indeed random. But the number may not be so random after all. Take a look at the \u003ccode\u003erandom.seed\u003c/code\u003e function.\nWhen generating a random number using python rand.int, it will utilise the python seed value to do so. By default, the seed value will be based on the system time, which is the same as shown in the code given. However, there is a particular behaviour in which if we have the same seed value, the value that is generated will be the same.\nFor example take a look at the below code snippet.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eimport random\nrandom.seed(9)\nprint(random.random())\nrandom.seed(9)\nprint(random.random())\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe specified the seed number as 9 and ran the random.random() function and it gives us the following output.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e0.46300735781502145\n0.46300735781502145\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis means that as long the seed value is the same, the number generated will be the same. Hence, to guess the number generated by the computer in the All About Timing Challenge, we will have to find the seed value. In this case, we know the seed value which is the current time. Hence, if we are able to run both the script at the same time, we will be able to guess the random number.\nThus, my solution was to run a local copy of the script and the actual script located on the Greyhat CTF server at the same time. If we time it properly, we will be able to retrieve the correct number. First, I executed the script locally and connected to the Greyhat CTF server at the same time. Once at the ‘Your guess’ prompt, I randomly entered a number in the local copy of the script. Once the number was generated in the error message, I copy and paste the number into the ‘Your Guess’ prompt given by the server. From there, I was able to retrieve the flag.\n\u003cimg src=\"/images/posts/ctfgreyhat2024/pic2.png\" alt=\"Image alt\"\u003e\nThis challenge as the name suggests is all about the timing. Both scripts had to be executed at the same time and it required multiple tries. However, I was eventually able to time it right and retrieve the flag.\u003c/p\u003e\n\u003ch2 id=\"baby-web\"\u003eBaby Web\u003c/h2\u003e\n\u003cp\u003eThe baby web challenge requires us to locate the relevant cookie to get the administrator rights to retrieve the cookie.\nThe Website given primarily consist of two pages, a Baby Web page and a Admin Page\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/posts/ctfgreyhat2024/pic3.png\" alt=\"Image alt\"\u003e\u003c/p\u003e\n\u003cp\u003eClicking on Request for Admin Access, it opens a guest pop-up page that prompts us to enter a username and email.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/posts/ctfgreyhat2024/pic4.png\" alt=\"Image alt\"\u003e\u003c/p\u003e\n\u003cp\u003eWhen entering the username and email, we were rickrolled. This was obviously not the solution.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/posts/ctfgreyhat2024/pic5.png\" alt=\"Image alt\"\u003e\u003c/p\u003e\n\u003cp\u003eThus, I try to inspect the HTTP traffic using burpsuite.  When accessing the admin webpage, I noticed that there was a session cookie.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/posts/ctfgreyhat2024/pic6.png\" alt=\"Image alt\"\u003e\u003c/p\u003e\n\u003cp\u003eUpon analysing the cookie, it appears there consist of three parts. The first part ‘eyJpc19hZG1pbiI6ZmFsc2V9’ looks like a base 64 encoded string.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/posts/ctfgreyhat2024/pic7.png\" alt=\"Image alt\"\u003e\u003c/p\u003e\n\u003cp\u003eUsing a base64 decoder, we realise ‘eyJpc19hZG1pbiI6ZmFsc2V9’ decodes to {“is_admin”:false}. This implies that the cookie is most likely used as some form of a mechanism that helps identify if the session is an admin session or not.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/posts/ctfgreyhat2024/pic8.png\" alt=\"Image alt\"\u003e\u003c/p\u003e\n\u003cp\u003eAt first, I attempted to encode the {“is_admin”:true} and use it as the new cookie. Unsurprisingly, this did not work.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/posts/ctfgreyhat2024/pic9.png\" alt=\"Image alt\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/posts/ctfgreyhat2024/pic10.png\" alt=\"Image alt\"\u003e\u003c/p\u003e\n\u003cp\u003eI decided to then modify include the other two parts of the cookie which still did not work.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/posts/ctfgreyhat2024/pic11.png\" alt=\"Image alt\"\u003e\u003c/p\u003e\n\u003cp\u003eNext, I decided to inspect the server code. In the given main.py file, we notice the app secret key.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/posts/ctfgreyhat2024/pic12.png\" alt=\"Image alt\"\u003e\u003c/p\u003e\n\u003cp\u003eSo what’s the purpose of this secret key? Recall previously how the cookie came in three part. The first part was the data, in which it contains a JSON like identifier that identifies if the session is an admin session. The other two parts are the date/time and the signature.\nThis 3-part cookie is a way in which flaks manage a secure session. By signing the cookie data with the secret, it creates a signature that is added to the cookie as a form of integrity checking mechanism. However, as we were given the flask server secret, there should be a way to forge our own properly signed cookie.\u003c/p\u003e\n\u003cp\u003eI decided to use flask-unsign (github link: \u003ca href=\"https://github.com/Paradoxis/Flask-Unsign\"\u003ehttps://github.com/Paradoxis/Flask-Unsign\u003c/a\u003e) to help sign the cookie with the given secret. With this signed cookie, I manage to successfully enter a new page.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/posts/ctfgreyhat2024/pic13.jpg\" alt=\"Image alt\"\u003e\u003c/p\u003e\n\u003cp\u003eTo retrive the information, we will need examine the website code and locate a hidden text box. Inspect the website elements and you can locate a hidden button in the HTML code.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn btn-primary\u0026#34; data-bs-toggle=\u0026#34;modal\u0026#34; data-bs-target=\u0026#34;#exampleModal\u0026#34; hidden=\u0026#34;\u0026#34;\u0026gt;\n        Super Secret Admin Button\n    \u0026lt;/button\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eRemove the\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ehidden\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eand it will reveal a admin button. Click the admin button and we will be able to retrieve the flag.\u003c/p\u003e\n","description":null,"image":"/images/posts/ctfgreyhat2024/pic1.png","permalink":"http://localhost:1313/website/blogs/greyhatctfwriteup/","title":"GreyhatCTFwriteup"},{"content":"\u003ch2 id=\"new-website\"\u003eNew Website\u003c/h2\u003e\n\u003cp\u003eWith the end of my studies in Polytechnic, I have decided to create a new portfolio website!\u003c/p\u003e\n\u003cp\u003eI utilized Wix for my previous portfolio website. However, I wish to test out the skills I have learn in school. Therefore, I chose to create a new portfolio website which was hosted on git.\u003c/p\u003e\n\u003cp\u003eIntially I considered using HTML, CSS and Javascript to create my own  website. However, I eventually decided against it as I wish to include blogging features into the website. While it is feasible to code it out, I wanted to make a website that can be easily maintain, especially in view of my upcoming national service.\u003c/p\u003e\n\u003cp\u003eAfter some research online, I chose to utilise Hugo to generate this website that you are on right now. I hope you will have a fun time exploring it :)\u003c/p\u003e\n","description":null,"image":"/images/posts/portfoliowebsite.png","permalink":"http://localhost:1313/website/blogs/my-first-post/","title":"New Portfolio Website"}]